Your task is to correct the testbench according to the failing scenarios. the information we have is the failing scenarios of the testbench, the problem description and the testbench code. the testbench code is consisted of both verilog and python code. The verilog code is to generate test scenarios and drive the DUT, the python code is to check if the output of the DUT is correct. Here is the problem description:
A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a "tap" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be "maximum-length". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.
Here is the testbench code:
ATTENTION: the following scenarios are wrong: [6]
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire [4:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
    .clk(clk),
    .reset(reset),
    .q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin
    // Scenario 1
    scenario = 1;
    reset = 1; // Apply active-high reset
    $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10; // Wait for one clock cycle
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 
    reset = 0; // Release reset
    $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 

    // Scenario 2
    scenario = 2;
    repeat(31) begin
        $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10;
        $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 
    end

    // Scenario 3
    scenario = 3;
    $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; // Move to cycle 10
    reset = 1; // Apply reset
    $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10; // Reset for one cycle
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 
    reset = 0; // Release reset
    $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 

    // Scenario 4
    scenario = 4;
    repeat(31) begin
        $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10;
        $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 
    end

    // Scenario 5
    scenario = 5;
    $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; // Move to cycle 20
    reset = 1; // Apply reset
    $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10; // Hold reset for the first cycle
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10; // Hold reset for the second cycle
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 
    reset = 0; // Release reset
    $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 

    // Scenario 6
    scenario = 6;
    repeat(31) begin
        $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10;
        $fdisplay(file, "scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q); #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    end

    $fclose(file);
    $finish;
end

endmodule

Here is the python code (The python code is more likely to be wrong):
class GoldenDUT:
    def __init__(self):
        # Initialize the inner state of the LFSR, following the specification.
        self.q_reg = 1  # As specified, reset conditions set the LFSR to 1

    def lfsr_next_state(self, current_state):
        # Compute the next state of the LFSR
        tap_positions = [4, 2]  # Positions are 5 and 3, zero-indexed to 4 and 2
        tap_xor_result = ((current_state >> tap_positions[0]) & 0x01) ^ ((current_state >> tap_positions[1]) & 0x01)
        next_state = (current_state << 1) & 0b11111  # Keep it within 5 bits
        next_state = next_state | tap_xor_result
        return next_state

    def load(self, signal_vector):
        # Check if reset is active
        if signal_vector['reset'] == 1:
            self.q_reg = 1  # Reset state
        else:
            # Update the internal state based on the previous state
            self.q_reg = self.lfsr_next_state(self.q_reg)

    def check(self, signal_vector):
        # When check_en is True, check if the current state matches the DUT output
        if signal_vector['check_en']:
            q_observed = signal_vector['q']
            if self.q_reg != q_observed:
                print(f"Scenario: {signal_vector['scenario']}, expected: q={self.q_reg}, observed q={q_observed}")
                return False
            return True
        return True

please reply me with the following steps:
1. please analyze the reason of the failed scenarios. If possible, please find the in common between the failed scenarios.
2. please analyze which part of the testbench code is wrong: verilog code or the python code
3. please tell me how to correct the wrong part (in natural language, do not give me the complete code implementation. please explain it in English)
here is an example of the reply:
1. the failed scenarios are all related to the same signal x
2. the python code is wrong, the logic implementation of signal x is wrong
3. the correct logic of signal x should be y.